from django.conf import settings
import urllib2, json
import requests 

"""
get_components

Return the list of POI data components available from this server. 
"""

def get_components():
    r = requests.get( settings.POI_SERVER + 'get_components' )
    return r.status_code, r.json()


"""
radial_search

Return the data of POIs within a given distance from a given location.

GET /radial_search?{parameters}

Mandatory parameters:
lat=latitude - Latitude of the center of the search circle [degrees]
lon=longitude - Longitude of the center of the search circle [degrees]
Optional parameters:
radius=radius - Radius of the search circle [meters], default is implementation dependent
category=category - POI category/categories to be included to results. Several categories can be given by separating them with commas. If this parameter is not given, all categories are included.
component=component - POI data component name(s) to be included to results. Several component names can be given by separating them with commas. If this parameter is not given, all components are included.
max_results=max_results - Maximum number of POIs returned.
begin_time=begin_time - When time of interest begins. See 'Time format' below. Optional, requires end_time.
end_time=end_time - When time of interest ends. See 'Time format' below. Required, if begin_time is defined.
min_minutes=min_minutes - Minimum time of availability in minutes. Optional. If begin_time is defined, default: a short time > 0.

"""

def radial_search(payload):
    r = requests.get( settings.POI_SERVER + 'radial_search', params=payload)
    return r.status_code, r.json()


""" 
bbox_search

Return the data of POIs within a given bounding box.

GET /bbox_search?{parameters}

Mandatory parameters:
north=latitude - Latitude of the northern edge of the bounding box [degrees]
south=latitude - Latitude of the southern edge of the bounding box [degrees]
east=longitude - Longitude of the eastern edge of the bounding box [degrees]
west=longitude - Longitude of the western edge of the bounding box [degrees]
Optional parameters:
category=category - POI category/categories to be included to results. Several categories can be given by separating them with commas. If this parameter is not given, all categories are included.
component=component - POI data component name(s) to be included to results. Several component names can be given by separating them with commas. If this parameter is not given, all components are included.
max_results=max_results - Maximum number of POIs returned.
begin_time=begin_time - When time of interest begins. See 'Time format' below. Optional, requires end_time.
end_time=end_time - When time of interest ends. See 'Time format' below. Required, if begin_time is defined.
min_minutes=min_minutes - Minimum time of availability in minutes. Optional. If begin_time is defined, default: a short time > 0.

"""

def bbox_search(payload):
    r = requests.get( settings.POI_SERVER + 'bbox_search', params=payload)
    return r.status_code, r.json()

"""
get_pois

Return the data of POIs listed in the query. This is intended to get additional information - other components - about interesting POIs.

GET /get_pois?{parameters}

Mandatory parameters:
poi_id=UUID - UUID of the POI. Several UUIDs can be given by separating them with commas.
Optional parameters:
component=component - POI data component name(s) to be included to results. Several component names can be given by separating them with commas. If this parameter is not given, all components are included.
get_for_update=true - The components requested are returned with all language and other variants and possible metadata for inspection and edit.
"""

def get_pois(payload):
    r = requests.get( settings.POI_SERVER + 'get_pois', params=payload)
    return r.status_code, r.json()


"""

add_poi

This function is used for adding a new POI entity into a database. The POI data is given as JSON in HTTP POST request. It generates a UUID for the new POI and returns it to the client in JSON format including the timestamp of the POI creation. The client can include different data components to the new POI by sending them along with the request.

The POSTed JSON must include only the content of a single POI, i.e. it must not contain a UUID as key as it is automatically generated by the server. 

Example request:

{
  "fw_core": {
	"category": "cafe", 
	"location": {
	  "wgs84" { 
		"latitude": 65.059334, 
		"longitude": 25.4664775
	  }
	}, 
	"name": {
	  "": "Aulakahvila"
	}
  }
}

"""

def add_poi(data):
    headers = {'Content-type': 'application/json'}
    r = requests.post( settings.POI_SERVER + 'add_poi', 
                             data=json.dumps(data), 
                             headers=headers)
    return r.status_code, r.json()

"""

update_poi

This function is used for updating data of an existing POI entity. Existing data components can be modified or new ones can be added. Each data component contains a 'last modified' timestamp in order to prevent concurrency issues.

The updated POI data is given as JSON in HTTP POST request. The server responds with HTTP status messages indicating the success or failure of the operation. 

Example request json:

{ 
  "30ddf703-59f5-4448-8918-0f625a7e1122": {
    "fw_core": {
	  "category": "cafe", 
	  "location": {
	    "wgs84" { 
		  "latitude": 65.059334, 
		  "longitude": 25.4664775
	    }
  	  }, 
	  "name": {
	    "": "Aulakahvila"
	  },
	  "description": {
	    "": "Cafe at the Univesity of Oulu"
      }
    }
  }
}


"""

def update_poi(data):
    headers = {'Content-type': 'application/json'}
    r = requests.post( settings.POI_SERVER + 'update_poi', 
                             data=json.dumps(data), 
                             headers=headers)
    return r.status_code, r.json()

"""

delete_poi

Delete existing POI using HTTP DELETE request. The UUID of the POI to be deleted is given in the request as a URL parameter 

"""

def delete_poi(uuid):
    r = requests.delete(settings.POI_SERVER +"delete", params={'poi_id':uuid})
    return r.status_code, r.json()



"""

create_poi_point

Uses add_poi method to add poi.

"""

def create_poi_point(lng,lat,name,category="Restaurant"):
    data = {"fw_core": {
                "category": category, 
                "location": {
                    "wgs84": { 
                        "latitude": float(lat), 
                        "longitude": float(lng)
                      }
                    }, 
                    "name": {
                        "": ""+name
                    }
                  }
            }
    return add_poi(data)
